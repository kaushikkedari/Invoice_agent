import pandas as pd
from typing import TypedDict, Optional, List, Dict, Any, Literal, Union

class AppState(TypedDict):
    """
    Represents the state of our application graph.
    """
    # --- Inputs ---
    raw_input: Optional[Union[str, bytes]] # User's initial input (text query or file path/bytes)
    input_type: Optional[Literal["image", "pdf", "text"]] # Type of input provided or detected

    # --- Query Branch State ---
    user_query: Optional[str]               # The user's natural language query
    parsed_query: Optional[Dict[str, Any]]  # Structured representation from analyze_query
    query_code: Optional[str]               # Generated SQL or code
    query_result: Optional[Any]             # Raw result from execution (could be text, list, etc.)
    result_dataframe: Optional[pd.DataFrame] # Result specifically as a DataFrame, if applicable
    output_format: Optional[Literal["text", "table", "plot"]] # Hint for preferred output
    summary: Optional[str]                  # Text summary of the query results
    plotly_chart_json: Optional[str]        # JSON string representing a Plotly chart

    # --- Invoice Branch State ---
    file_path: Optional[str]                # Path to the temporary file (if applicable)
    extracted_invoice_data: Optional[Dict[str, Any]] # Data extracted from invoice
    invoice_code: Optional[str] # SQL generated by this node or query node
    failed_sql_query: Optional[str] # Store the SQL that caused the DB error
    db_error_message: Optional[str] # Store the error from the DB execution attempt
    po_query_correction_attempts: Optional[int] # Counter for correction retries
    po_data: Optional[List[Dict[str, Any]]] # Purchase Order data fetched from query 
    validation_result: Optional[Dict[str, Any]] # Detailed validation results
    validation_status: Optional[Literal["valid", "invalid"]] # Overall validation status

    # --- General State ---
    error: Optional[str]                    # Stores error messages if any node fails
